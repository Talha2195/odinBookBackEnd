generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement()) 
  firstName         String  
  lastName          String?  
  bio               String?
  username          String       @unique 
  password          String?      
  githubId          String?      @unique 
  profilePicture    String?      
  status            String       @default("active") 
  role              String       @default("regular")
  sentMessages      Messages[]   @relation("SentMessages")
  receivedMessages  Messages[]   @relation("ReceivedMessages")
  sentRequests      FriendRequest[] @relation("SentRequests") 
  receivedRequests  FriendRequest[] @relation("ReceivedRequests") 
  friends           Friendship[] @relation("UserFriends")
  friendOf          Friendship[] @relation("FriendOf")
  posts             Post[]       @relation("UserPosts")
  likes             Like[]       @relation("UserLikes")
  dislikes          Dislike[]    @relation("UserDislikes")
  comments          Comment[]    @relation("UserComments")
  commentLikes      CommentLike[] @relation("UserCommentLikes")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation("UserPosts", fields: [userId], references: [id])
  likes     Like[]   @relation("PostLikes")
  dislikes  Dislike[] @relation("PostDislikes")
  comments  Comment[] @relation("PostComments")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  user      User     @relation("UserComments", fields: [userId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  likes     CommentLike[] @relation("CommentLikes")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  user      User     @relation("UserCommentLikes", fields: [userId], references: [id])
  comment   Comment  @relation("CommentLikes", fields: [commentId], references: [id])
}

model Messages {
  id          Int      @id @default(autoincrement())
  message     String
  createdAt   DateTime @default(now())
  senderId    Int
  receiverId  Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  createdAt   DateTime @default(now())
  status      RequestStatus
  
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model Friendship {
  id          Int      @id @default(autoincrement())
  userId      Int
  friendId    Int
  createdAt   DateTime @default(now())

  user        User     @relation("UserFriends", fields: [userId], references: [id])
  friend      User     @relation("FriendOf", fields: [friendId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
}

model Dislike {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  user      User     @relation("UserDislikes", fields: [userId], references: [id])
  post      Post     @relation("PostDislikes", fields: [postId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}